<?php
namespace tcbQB\QueryBuilder\Syntax;

use tcbQB\QueryBuilder\AbstractQuery;
use tcbQB\QueryBuilder\Syntax\From;

class Select extends AbstractQuery
{


    /**
     * Начало строки SELECT запроса
     *
     * @param array $columns
     */
    public function __construct($columns)
    {
        $this->query = "SELECT ";
        if(gettype($columns)==="array")
        {
            foreach ($columns as $column)
            {
                $this->query.=$column.",";
            }
            }else
            {
                $this->query.=$columns.",";
            }
        return $this;
    }

    /**
     * Команда FROM
     *
     * @param array $tables
     * @return \tcbQB\QueryBuilder\Syntax\From
     */
    public function from($tables)
    {
        $this->query=substr_replace($this->query,' ',-1);
        $from = new \tcbQB\QueryBuilder\Syntax\From($tables,$this->query);
        return $from;
    }

    /**
     * @return string
     */
        public function get()
        {
            $this->query=substr_replace($this->query,' ',-1);
            return parent::get(); // TODO: Change the autogenerated stub
        }


    /**
     * Добавляет функцию count() в запрос
     *
     * @param array $columns
     * @param string null $asColumn название колонки с функцией count()
     * @return $this
     */
        public function count($columns, $asColumn= null)
        {
            if(isset($asColumn))
            {
                $this->query.="count($columns) AS $asColumn,";
            }else
            {
                $this->query.="count($columns),";
            }
            return $this;

        }

    /**
     * Добавляет функцию min() в запрос
     *
     * @param string $columns
     * @param string null $asColumn название колонки с функцией count()
     * @return $this
     */
        public function min($columns, $asColumn= null)
        {
            if(isset($asColumn))
            {
                $this->query.="MIN($columns) AS $asColumn,";
            }else
            {
                $this->query.="MIN($columns),";
            }
            return $this;
        }


    /**
     * Добавляет функцию max() в запрос
     *
     * @param string $columns
     * @param  string null $asColumn название колонки с функцией count()
     * @return $this
     */
        public function max($columns, $asColumn= null)
         {
             if(isset($asColumn))
             {
                 $this->query.="MAX($columns) AS $asColumn,";
             }else
             {
                 $this->query.="MAX($columns),";
             }
             return $this;
         }

    /**
     * добавляет в запрос колонки с представлением другого имени с помощью команды AS
     *
     * @param array $columns массив представленный в виде "название колонки" => "название в выходной таблице"
     * @return $this
     */
        public function asColumns($columns)
        {
            foreach ($columns as $key => $column)
            {
                $this->query.="$key AS $column,";
            }
            return $this;
        }


}
