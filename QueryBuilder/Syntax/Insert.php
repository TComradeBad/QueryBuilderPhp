<?php


namespace QueryBuilder\Syntax;
require_once PROJECT_PATH."/QueryBuilder/AbstractQuery.php";
use QueryBuilder\AbstractQuery;
class Insert extends  AbstractQuery
{

    private $values;
    public function __construct($table,$columns)
    {
        $this->query="INSERT INTO $table(";
        if(!is_string($columns))
        {

            foreach ($columns as $column)
            {
                $this->query.="$column,";
            }
            $this->query=substr_replace($this->query,'',-1);

        }else
        {
            $this->query.=$columns;
        }
        $this->query.=") ";
        return $this;
    }

    public function values($values)
    {
        $valueOneSize=null;
        $valueDoubleSize=null;

        if(!is_string($values))
        {
            foreach($values as $valueFirstlevel)
            {
                if(is_array($valueFirstlevel))
                {
                    $valueDoubleSize.="(";
                    foreach ($valueFirstlevel as $valueSecondlevel)
                    {
                        $valueDoubleSize.="$valueSecondlevel,";
                    }
                    $valueDoubleSize=substr_replace($valueDoubleSize,"",-1);
                    $valueDoubleSize.="),";

                }else
                {
                    $valueOneSize.="$valueFirstlevel,";
                }

            }

            if(isset($valueDoubleSize))
            {
                $valueDoubleSize=substr_replace($valueDoubleSize,"",-1);
                $this->values=$valueDoubleSize;
                $this->values="VALUES".$this->values;
            }
            if(isset($valueOneSize))
            {
                $valueOneSize=substr_replace($valueOneSize,"",-1);
                $valueOneSize="($valueOneSize)";
                $this->values=$valueOneSize;
                $this->values="VALUES".$this->values;
            }
        }else
        {
            $this->values=$values;
            $this->values="VALUES($this->values)";
        }




        return $this;
    }

    public function get()
    {
        $this->query.=$this->values;
        return parent::get(); // TODO: Change the autogenerated stub
    }


}